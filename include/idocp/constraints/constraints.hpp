#ifndef IDOCP_CONSTRAINTS_HPP_
#define IDOCP_CONSTRAINTS_HPP_

#include <vector>
#include <memory>

#include "idocp/robot/robot.hpp"
#include "idocp/ocp/split_solution.hpp"
#include "idocp/ocp/split_direction.hpp"
#include "idocp/ocp/split_kkt_residual.hpp"
#include "idocp/ocp/split_kkt_matrix.hpp"
#include "idocp/impulse/impulse_split_solution.hpp"
#include "idocp/impulse/impulse_split_direction.hpp"
#include "idocp/impulse/impulse_split_kkt_residual.hpp"
#include "idocp/impulse/impulse_split_kkt_matrix.hpp"
#include "idocp/constraints/constraint_component_base.hpp"
#include "idocp/constraints/impulse_constraint_component_base.hpp"
#include "idocp/constraints/constraint_component_data.hpp"
#include "idocp/constraints/constraints_data.hpp"


namespace idocp {

///
/// @class Constraints 
/// @brief Stack of the inequality constraints. Composed by constraint 
/// components that inherits ConstraintComponentBase.
///
class Constraints {
public:
   using ConstraintComponentBasePtr = std::shared_ptr<ConstraintComponentBase>;
   using ImpulseConstraintComponentBasePtr 
      = std::shared_ptr<ImpulseConstraintComponentBase>;

  ///
  /// @brief Default constructor. 
  ///
  Constraints();

  ///
  /// @brief Destructor. 
  ///
  ~Constraints();

  ///
  /// @brief Default copy constructor. 
  ///
  Constraints(const Constraints&) = default;

  ///
  /// @brief Default copy operator. 
  ///
  Constraints& operator=(const Constraints&) = default;

  ///
  /// @brief Default move constructor. 
  ///
  Constraints(Constraints&&) noexcept = default;

  ///
  /// @brief Default move assign operator. 
  ///
  Constraints& operator=(Constraints&&) noexcept = default;

  ///
  /// @brief Append a constraint component to the cost function.
  /// @param[in] constraint shared pointer to the constraint component appended 
  /// to the constraints.
  ///
  void push_back(const ConstraintComponentBasePtr& constraint);

  ///
  /// @brief Append a constraint component to the cost function.
  /// @param[in] constraint shared pointer to the constraint component appended 
  /// to the constraints.
  ///
  void push_back(const ImpulseConstraintComponentBasePtr& constraint);

  ///
  /// @brief Clear constraints by removing all components.
  ///
  void clear();

  ///
  /// @brief Check if the constraints component requres kinematics of robot 
  /// model.
  /// @return true if the constraints component requres kinematics of 
  /// Robot model. false if not.
  ///
  bool useKinematics() const;

  ///
  /// @brief Creates ConstraintsData according to robot model and constraint 
  /// components. 
  /// @param[in] robot Robot model.
  /// @param[in] time_stage Time stage. If -1, the impulse stage is assumed. 
  /// @return Constraints data.
  ///
  ConstraintsData createConstraintsData(const Robot& robot, 
                                        const int time_stage) const;

  ///
  /// @brief Check whether the current solution s is feasible or not. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  /// @return true if s is feasible. false if not.
  ///
  bool isFeasible(Robot& robot, ConstraintsData& data,
                  const SplitSolution& s) const;

  ///
  /// @brief Check whether the current solution s is feasible or not. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  /// @return true if s is feasible. false if not.
  ///
  bool isFeasible(Robot& robot, ConstraintsData& data,
                  const ImpulseSplitSolution& s) const;

  ///
  /// @brief Set the slack and dual variables of each constraint components. 
  /// @param[in] robot Robot model.
  /// @param[out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  ///
  void setSlackAndDual(Robot& robot, ConstraintsData& data, 
                       const SplitSolution& s) const;

  ///
  /// @brief Set the slack and dual variables of each constraint components. 
  /// @param[in] robot Robot model.
  /// @param[out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  ///
  void setSlackAndDual(Robot& robot, ConstraintsData& data, 
                       const ImpulseSplitSolution& s) const;

  ///
  /// @brief Augment the dual residual of the constraints to the KKT residual 
  /// with respect to the configuration, velocity, acceleration, and contact 
  /// forces.
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] dt Time step.
  /// @param[in] s Split solution.
  /// @param[out] kkt_residual KKT residual.
  ///
  void augmentDualResidual(Robot& robot, ConstraintsData& data, const double dt, 
                           const SplitSolution& s, 
                           SplitKKTResidual& kkt_residual) const;

  ///
  /// @brief Augment the dual residual of the constraints to the KKT residual 
  /// with respect to the configuration, velocity, acceleration, and contact 
  /// forces.
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  /// @param[out] kkt_residual KKT residual.
  ///
  void augmentDualResidual(Robot& robot, ConstraintsData& data,
                           const ImpulseSplitSolution& s,
                           ImpulseSplitKKTResidual& kkt_residual) const;

  ///
  /// @brief Consense slack and dual of the constraints and factorize condensed
  /// KKT Hessian and residual with respect to the configuration, velocity, 
  /// acceleration, and contact forces. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData(). residual and duality are also 
  /// computed.
  /// @param[in] dt Time step.
  /// @param[in] s Split solution.
  /// @param[out] kkt_matrix The KKT matrix. The condensed Hessians are added  
  /// to this data.
  /// @param[out] kkt_residual KKT residual. The condensed residual are added 
  /// to this data.
  ///
  void condenseSlackAndDual(Robot& robot, ConstraintsData& data,
                            const double dt, const SplitSolution& s,
                            SplitKKTMatrix& kkt_matrix, 
                            SplitKKTResidual& kkt_residual) const;

  ///
  /// @brief Consense slack and dual of the constraints and factorize condensed
  /// KKT Hessian and residual with respect to the configuration, velocity, 
  /// acceleration, and contact forces. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData(). residual and duality are also 
  /// computed.
  /// @param[in] s Split solution.
  /// @param[out] kkt_matrix The KKT matrix. The condensed Hessians are added  
  /// to this data.
  /// @param[out] kkt_residual KKT residual. The condensed residual are added 
  /// to this data.
  ///
  void condenseSlackAndDual(Robot& robot, ConstraintsData& data,
                            const ImpulseSplitSolution& s,
                            ImpulseSplitKKTMatrix& kkt_matrix, 
                            ImpulseSplitKKTResidual& kkt_residual) const;

  ///
  /// @brief Compute directions of slack and dual.
  /// @param[in] robot Robot model.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  /// @param[in] d Split direction.
  ///
  void computeSlackAndDualDirection(Robot& robot, ConstraintsData& data, 
                                    const SplitSolution& s,
                                    const SplitDirection& d) const;

  ///
  /// @brief Compute directions of slack and dual.
  /// @param[in] robot Robot model.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  /// @param[in] d Split direction.
  ///
  void computeSlackAndDualDirection(Robot& robot, ConstraintsData& data, 
                                    const ImpulseSplitSolution& s,
                                    const ImpulseSplitDirection& d) const;

  ///
  /// @brief Compute and returns the maximum step size by applying 
  /// fraction-to-boundary-rule to the direction of slack.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @return Maximum step size of the slack.
  ///
  double maxSlackStepSize(const ConstraintsData& data) const;

  ///
  /// @brief Compute and returns the maximum step size by applying 
  /// fraction-to-boundary-rule to the direction of dual.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @return Maximum step size of the dual.
  ///
  double maxDualStepSize(const ConstraintsData& data) const;

  ///
  /// @brief Updates the slack with step_size.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] step_size Step size. 
  ///
  static void updateSlack(ConstraintsData& data, const double step_size);

  ///
  /// @brief Updates the dual with step_size.
  /// @param[in, out] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] step_size Step size. 
  ///
  static void updateDual(ConstraintsData& data, const double step_size);

  ///
  /// @brief Computes and returns the value of the barrier function for slack 
  /// variables.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @return Value of the barrier function. 
  ///
  double costSlackBarrier(const ConstraintsData& data) const;

  ///
  /// @brief Computes and returns the value of the barrier function for slack 
  /// variables with the step_size.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] step_size Step size. 
  /// @return Value of the barrier function. 
  ///
  double costSlackBarrier(const ConstraintsData& data, 
                          const double step_size) const;

  ///
  /// @brief Computes the primal and dual residual of the constraints. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  ///
  void computePrimalAndDualResidual(Robot& robot, ConstraintsData& data, 
                                    const SplitSolution& s) const;

  ///
  /// @brief Computes the primal and dual residual of the constraints. 
  /// @param[in] robot Robot model.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @param[in] s Split solution.
  ///
  void computePrimalAndDualResidual(Robot& robot, ConstraintsData& data, 
                                    const ImpulseSplitSolution& s) const;

  ///
  /// @brief Return the L1-norm of the primal residual of the constraints.
  /// before calling this function, Constraints::computePrimalAndDualResidual 
  /// or Constraints::condenseSlackAndDual must be called.
  /// @param[in] data Constraints data generated by 
  /// @return L1 norm of the primal residual and duality of the constraints. 
  ///
  static double l1NormPrimalResidual(const ConstraintsData& data);

  ///
  /// @brief Returns the squared norm of the primal residual and duality of the 
  /// constraints. Before call this function, 
  /// Constraints::computePrimalAndDualResidual or 
  /// Constraints::condenseSlackAndDual must be called.
  /// @param[in] data Constraints data generated by 
  /// Constraints::createConstraintsData().
  /// @return Squared norm of the primal residual and duality of the constraints. 
  ///
  static double squaredNormPrimalAndDualResidual(const ConstraintsData& data);

  ///
  /// @brief Set the barrier parameter to all constraint components.
  /// @param[in] barrier Barrier parameter. Must be positive. Should be small.
  ///
  void setBarrier(const double barrier);

  ///
  /// @brief Set the fraction to boundary rate to all constraint components.
  /// @param[in] fraction_to_boundary_rate Must be larger than 0 and smaller 
  /// than 1. Should be between 0.9 and 0.995.
  ///
  void setFractionToBoundaryRate(const double fraction_to_boundary_rate);

private:
  std::vector<ConstraintComponentBasePtr> position_level_constraints_, 
                                          velocity_level_constraints_, 
                                          acceleration_level_constraints_;
  std::vector<ImpulseConstraintComponentBasePtr> impulse_level_constraints_;

};

} // namespace idocp

#include "idocp/constraints/constraints.hxx"

#endif // IDOCP_CONSTRAINTS_HPP_